import inspect
import sys
import os
import json
from os.path import isfile, join
from pubmed_lookup import PubMedLookup
from pubmed_lookup import Publication
from Bio import Entrez
from Bio import Medline
import time
try:
    from urllib.error import HTTPError  # for Python 3
except ImportError:
    from urllib2 import HTTPError  # for Python 2


# NCBI will contact user by email if excessive queries are detected
email = 'firstmail@gmail.com'
base_url = 'http://www.ncbi.nlm.nih.gov/pubmed/'
Entrez.email = email
directory = '/home/devil/research/CLEF/ehealth/task2/dataset/Training Data/topics_train'
def download_articles():
	########################################################
	'''
	Make an articles object with the following format for
	each file present in "directory" and save as fiel.json
	in the same directory
	articles = {
	'Topic' = ""
	'Title' = ""
	'Query' = ""
	'Pids' = [
			{
			'LA', 'DP', 'CDAT', 'PL', 'AID', 'AU', 'AB',
			'CI', 'PMID', 'STAT', 'PT', 'PB', 'CTDT', 'DA',
			'DRDT', 'GR', 'BTI', 'FAU', 'FED', 'TI',
			'EDAT', 'ED', 'MHDA'
			}
			]
	}
	articles ['Pids'] is list of objects having the above keys
	where 'PMID' is the pubmed id 
	and 'AB' is the abstract
	'''
	########################################################
	for file in os.listdir(directory):
		if not isfile(join(directory,file)):
			continue
		filename = os.path.join(directory,file)
		target = open(filename,'r')

		articles = {}
		topic_line = target.readline()
		topic = topic_line.split(':')[1].strip()
		articles['Topic'] = topic

		target.readline()
		title_line = target.readline()
		title = title_line.split(':')[1].strip()
		articles['Title'] = title

		target.readline()
		target.readline()
		
		articles['Query'] = ""
		query = ""
		lines = list(target.readlines())
		for line in lines:
			if line == "\n":
				break
			else:
				query+=line
		articles['Query'] = query.strip()

		
		urls = []
		for line in lines:
			if "Pids" not in line and line!="\n":
				urls.append(line.strip())
		urls = urls[1:]

		#print("Total number of unique urls:" + str(len(urls)))
		handle = Entrez.efetch(db="pubmed", id=urls, rettype="medline",
                           retmode="text")
		records = Medline.parse(handle)	
		articles['pids'] = []

		records = list(records)
		articles['pids'] = records
		with open(os.path.join(directory,file)+'.json', 'w') as fp:
			json.dump(articles, fp)
		print("DONE " + file)
#		sys.exit()

def load_article(file):
	#######################
	'''
	load saved json articles
	'''
	#######################
	with open(os.path.join(directory,file)+'.json', 'r') as fp:
		articles = json.load(fp)
	#print (articles['pids'][0])
	"""
	for i in range(1, 10):
		try:
			print (i)
			print(
			
			TITLE:\n{title}\n
			AUTHORS:\n{authors}\n
			DATE PUBLISHED:\n{dp}
			ABSTRACT:\n{abstract}\n

			.format(**{
			    'title': articles['pids'][i]['TI'],
			    'dp': articles['pids'][i]['DP'],
			    'authors': articles['pids'][i]['AU'],
			    'abstract': articles['pids'][i]['AB'],
			}))
		except:
			pass
	"""

def print_article(file):
	print(articles['Title'],articles['pids'][0]['AB'],articles['pids'][0].keys())


def divide_into_directory(file):
	"""
	divide "file" number file's json data into separate files and save in a directory
	to be indexed by lucene
	"""
	with open(os.path.join(directory,file)+'.json', 'r') as fp:
		articles = json.load(fp)
	
	articles_directory = os.path.join(directory,file)+'_articles'
	if not os.path.exists(articles_directory):
		os.mkdir(articles_directory)
	
	

	#print (len(articles['pids']))
	for i in range (1,len(articles['pids'])):
		if i%30 == 0:
			print (i)
		individual_file = os.path.join(articles_directory,articles['pids'][i]['PMID'])
		with open(individual_file, 'w+') as fp:
			#print(articles['pids'][i])
			try:
				fp.write(articles['pids'][i]['TI'])
				fp.write(articles['pids'][i]['AB'])
			except Exception as e:
				print(record['PMID'])
			"""
			for value in articles['pids'][i]:
				#print(value)
				#print(articles['pids'][i][value])
				try:
					fp.write(articles['pids'][i][value])
				except:
					for values in value:
						fp.write(values)
						fp.write(' ')
				fp.write('\n')
				#fp.write('\n')
			"""

"""
query only fetches first 10000 results
"""
def remaining(file):
	urls=["843297", "834875", "830912", "556839", "195255", "137923", "836220", "914576", "914575", "914572", "914571", "912993", "905550", "899506", "897610", "615715", "614505", "608336", "406640", "343479", "299686", "203149", "144796", "143871", "140934", "140793", "122468", "1005140", "789827", "192413", "188197", "994649", "982732", "978816", "14381", "1004828", "994308", "959530", "62380", "980128", "989067", "980212", "962644", "956228", "60355", "956249", "821012", "66220", "1004854", "988427", "981929", "975741", "973331", "945956", "938166", "135669", "133493", "133463", "984907", "132772", "132323", "1012431", "932081", "932080", "178229", "133565", "131969", "946466", "131377", "1274539", "1266094", "1263326", "1262375", "1262364", "1257435", "959732", "822502", "781709", "131284", "1263806", "1252890", "1267579", "1260667", "1257888", "1249615", "130219", "130216", "1264721", "1261956", "55488", "1270498", "1265412", "1252175", "813313", "1269448", "1269444", "1258617", "1247327", "1247259", "1244678", "985028", "975651", "968156", "946058", "941717", "776316", "134484", "129484", "813127", "1044299", "128126", "175498", "765997", "19899271", "1228483", "1224155", "1105752", "810712", "1178166", "1193798", "1192628", "1178157", "1217206", "133109", "130591", "126654", "1161169", "1160207", "127431", "125916", "124964", "1154172", "125850", "126498", "125864", "1238939", "1179804", "1156295", "1129458", "1092927", "1079261", "125350", "124736", "1128834", "1240657", "1239682", "1154378", "1141279", "1127808", "1127771", "126406", "49353", "1240338", "1141925", "127633", "123953", "1151095", "1121365", "1200429", "1179122", "1134764", "1117776", "124414", "123446", "169585", "1124959", "804184", "123662", "123655", "123365", "50077", "803621", "1123367", "1233866", "1225507", "1220674", "1126070", "1119976", "1113975", "1110129", "165918", "131372", "131023", "128446", "125637", "123050", "122819", "4448051", "4609304", "4454108", "4434036", "4606284", "4452712", "4452708", "4281427", "4278467", "4446860", "4547567", "4459324", "4278185", "4138994", "4852492", "4433012", "4416290", "4409679", "4282160", "4279653", "4277722", "4153949", "4445845", "4841878", "4280803", "4279437", "4841239", "4276454", "4274709", "4367027", "4276360", "4274325", "4819202", "4610092", "4418054", "4279069", "4278433", "4133064", "4434793", "4272805", "4843929", "4831996", "4830033", "4817224", "4808488", "4615532", "4451110", "4451107", "4451106", "4413502", "4371724", "4281247", "4218044", "4130589", "4544614", "4521480", "4357242", "4273678", "4273677", "4273675", "4358058", "4271171", "4774646", "4792988", "4789347", "4788980", "4276038", "4782714", "4270883", "4270321", "4127877", "4741428", "4269649", "4123617", "4619064", "4548000", "4272600", "4270761", "4269429", "4577015", "4713407", "4780417", "4722945", "4710649", "4709709", "4269934", "4123520", "4704895", "4707298", "4720412", "4703205", "4267504", "4145927", "4735287", "4267930", "4266527", "4705777", "4266462", "4804041", "4762825", "4762819", "4743878", "4702604", "4573730", "4272506", "4269470", "4267591", "4197877", "4656914", "4647855", "4569464", "4511088", "4143913", "4678703", "4347001", "4673975", "4264583", "4264452", "4264363", "4264401", "4661156", "4264766", "4345887", "4265039", "4667976", "4277584", "4270751", "4267131", "4265646", "4116083", "4559532", "5073286", "4557612", "4671662", "4263787", "4260586", "5051430", "4260719", "5055160", "4661684", "5082184", "4263414", "4272673", "4260042", "5084299", "5065515", "4665351", "4636601", "4516334", "4262362", "4260952", "4117943", "5150484", "4262785", "4256909", "5131250", "4259058", "4257238", "5142658", "5135379", "5111501", "4260777", "4110880", "22046639", "5164761", "5160988", "4257645", "5147402", "5130338", "5566302", "5150392", "5088857", "4338527", "4260882", "4260878", "4254222", "5090265", "5573873", "5558953", "5556088", "5110766", "5089643", "4255365", "5555152", "4251644", "5570276", "4252416", "5549618", "5580325", "5554710", "5551617", "5539810", "5172740", "5161648", "5122975", "5122052", "5120866", "5120865", "5117627", "5115302", "5110099", "5003817", "4327951", "4256316", "4255764", "4252738", "4252053", "5519994", "5519423", "4323561", "5485794", "4921571", "4250064", "4249954", "4249938", "4249562", "5517138", "5512877", "5506077", "5481386", "5470297", "5459960", "4249343", "4248497", "5451948", "4248119", "5430489", "5427052", "4191520", "5420427", "4324527", "5416216", "4244511", "5535583", "5522868", "5513915", "5413028", "5269867", "5351761", "4902791", "4391793", "4242708", "5344990", "5406105", "5258215", "4242481", "5823732", "4251807", "4242321", "4240773", "4309631", "4308656", "4241134", "4892709", "4339155", "4261099", "4240691", "4238839", "4238458", "4238082", "4237889", "4180704", "16335115", "5356076", "4238433", "5805588", "5796661", "5408848", "5408844", "5372367", "5367301", "4245340", "4240347", "5730435", "5754987", "5740944", "5305130", "5761644", "5757955", "5746177", "4237676", "4182995", "4235159", "5304216", "4884041", "4236578", "4236577", "4234913", "4235012", "5703288", "5700474", "4236113", "4235831", "4235829", "4235823", "4235812", "4235811", "4316067", "4233102", "4232311", "5746086", "5724095", "4232624", "5666430", "5648694", "5738777", "5684024", "5239647", "4231057", "4231326", "5659265", "4874633", "5716232", "5691761", "4232545", "4169635", "5758778", "5758749", "5739046", "5732117", "5634939", "5255702", "4890078", "4295544", "5308469", "5598313", "5610516", "4229587", "4228595", "6051080", "4295448", "6064185", "4229332", "4227024", "6061755", "5614958", "4240034", "5586367", "4164930", "4226022", "5590602", "4225735", "5614521", "5297787", "4292978", "4234731", "6062637", "6033106", "6031883", "6030672", "5598764", "5594795", "4224725", "4224724", "4163089", "4231557", "6004149", "4230838", "4224519", "4224120", "4230204", "4224175", "5990352", "4223585", "4222996", "5941654", "5299192", "5219788", "5907320", "5996117", "4221782", "6001540", "5944479", "4895009", "4174769", "5864467", "4223220", "4223049", "5897505", "14304367", "14321344", "14346253", "14263551", "14331495", "14319822", "14257739", "14252403", "14317075", "14253900", "14233319", "14289917", "14270055", "14270053", "14256226", "5889114", "5872060", "5212868", "14239707", "14222855", "14213604", "14229745", "14225565", "14225563", "14210816", "14213800", "14225097", "14213415", "14209588", "14195807", "14208019", "14202772", "14179244", "14173197", "14235216", "14196503", "14176228", "14158370", "14196068", "14181011", "14173891", "14159515", "4232448", "14194089", "14147159", "14120640", "14153604", "14194784", "14194776", "14144839", "14144031", "14137375", "14133339", "14183009", "14141653", "14135210", "14130857", "14129680", "14137141", "14120545", "14279546", "14164602", "14157083", "14136907", "14113754", "14104134", "14099284", "14134050", "14090224", "14088333", "14112990", "14099892", "14053899", "14069139", "14055771", "14048441", "14101048", "14089096", "14062173", "14045787", "13932792", "14187831", "14091919", "14082317", "14057235", "14054357", "14186059", "13970775", "13954538", "14132448", "14023356", "13988277", "13934709", "14112435", "13934593", "13973355", "13989081", "14038479", "13988273", "14462816", "14461913", "13911036", "13688514", "13887758", "13754966", "13784444", "13757150", "13812237", "13725525", "14445979", "14403763", "13794533", "13652012", "13643781", "14398877", "13585155", "13585792", "13590753", "13578901", "13582617", "13521289", "13502049", "13460739", "13518947", "13434129", "13396623", "13506224", "13500524", "13447253", "13444747", "13366467", "13365732", "13335945", "13337456", "13397346", "13393975", "13320993", "13314884", "13251893", "14353647", "14349741", "14348907", "13236737", "13185044", "13176073", "13172047", "13156331", "13109250", "13094777", "13070887", "13075714", "13142177", "13050374", "13026972", "12992524", "14907336", "12999866", "14910070", "14921511", "14890312", "14883697", "14823371", "15443523", "15405027", "18131684", "18118759", "18130071", "18892874"]
	handle = Entrez.efetch(db="pubmed", id=urls, rettype="medline",
                           retmode="text")
	records = Medline.parse(handle)	
	articles_directory = os.path.join(directory,file)+'_articles'
	if not os.path.exists(articles_directory):
		os.mkdir(articles_directory)
	i = 0
	for record in records:
		if i%20 == 0:
			print (i)
		i=i+1
		individual_file = os.path.join(articles_directory,record['PMID'])
		
		with open(individual_file, 'w+') as fp:
			#print(articles['pids'][i])
			try:
				fp.write(record['TI'])
				fp.write(record['AB'])
			except Exception as e:
				print(record['PMID'])


#download_articles()
#load_article('19')

remaining('6')

#remaining("19")